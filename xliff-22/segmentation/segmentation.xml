<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.docbook.org/xml/4.5/docbookx.dtd" [
<!ENTITY % xinclude SYSTEM "../docbook/xinclude.mod">
%xinclude;
<!ENTITY % local.common.attrib "xml:base CDATA #IMPLIED">
]>
<section id="segmentation">
  <title>Segmentation</title>

  <para>In the context of XLIFF, a segment is content which is either a unit of extracted text, or
    has been created from a unit of extracted text by means of a segmentation mechanism such as
    sentence boundary detection. For example, a segment can be a title, the text of a menu item, a
    paragraph or a sentence in a paragraph.</para>

  <para>In the context of XLIFF, other types representations sometimes called "segmentation" can be
    represented using annotations. For example: the terms in a segment can be identified and marked
    up using the <olink targetdoc="../inline/inline.xml" targetptr="termAnnotation">term
      annotation</olink>.</para>

  <para>XLIFF does not specify how segmentation is carried out, only how to represent its result.
    Material provisions regarding segmentation can be found for instance in the Segmentation Rules
    eXchange standard <olink targetdoc="../xliff22.xml" targetptr="biblio_srx">[SRX]</olink> or
      <olink targetdoc="../xliff22.xml" targetptr="uax29">[UAX #29]</olink>.</para>

  <section id="segmentationRepresentation">
    <title>Segments Representation</title>

    <para>In XLIFF each segment of processed content is represented by a <olink
        targetdoc="../elements/structural/segment.xml" targetptr="segment"
          ><code>&lt;segment&gt;</code></olink> element.</para>

    <para>A <olink targetdoc="../elements/structural/unit.xml" targetptr="unit"
          ><code>&lt;unit&gt;</code></olink> can comprise a single <olink
        targetdoc="../elements/structural/segment.xml" targetptr="segment"
          ><code>&lt;segment&gt;</code></olink>.</para>

    <para>Each <olink targetdoc="../elements/structural/segment.xml" targetptr="segment"
          ><code>&lt;segment&gt;</code></olink> element has one <olink
        targetdoc="../elements/structural/source.xml" targetptr="source"
        ><code>&lt;source&gt;</code></olink> element that contains the source content and one
      OPTIONAL <olink targetdoc="../elements/structural/target.xml" targetptr="target"
          ><code>&lt;target&gt;</code></olink> element that can be empty or contain the translation
      of the source content at a given state.</para>

    <para>Content parts between segments are represented with the <olink
        targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
          ><code>&lt;ignorable&gt;</code></olink> element, which has the same content model as
        <olink targetdoc="../elements/structural/segment.xml" targetptr="segment"
          ><code>&lt;segment&gt;</code></olink>.</para>

    <para>For example:</para>

    <para><programlisting>
&lt;unit id="1"&gt;
  &lt;segment&gt;
    &lt;source&gt;First sentence.&lt;/source&gt;
    &lt;target&gt;Premi√®re phrase.&lt;/target&gt;
  &lt;/segment&gt;
  &lt;ignorable&gt;
    &lt;source&gt; &lt;/source&gt;
  &lt;/ignorable&gt;
  &lt;segment&gt;
    &lt;source&gt;Second sentence.&lt;/source&gt;
  &lt;/segment&gt;
&lt;/unit&gt;
</programlisting></para>
  </section>

  <section id="segorder">
    <title>Segments Order</title>

    <para>Some Agents (e.g. aligner tools) can segment content, so that the target segments are not
      in the same order as the source segments.</para>

    <para>To be able to map order differences, the <olink
        targetdoc="../elements/structural/target.xml" targetptr="target"
        ><code>&lt;target&gt;</code></olink> element has an OPTIONAL <olink
        targetdoc="../attributes/order.xml" targetptr="order"><code>order</code></olink> attribute
      that indicates its position in the sequence of segments (and inter-segments). Its value is an
      integer from 1 to N, where N is the sum of the numbers of the <olink
        targetdoc="../elements/structural/segment.xml" targetptr="segment"
          ><code>&lt;segment&gt;</code></olink> and <olink
        targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
          ><code>&lt;ignorable&gt;</code></olink> elements within the given enclosing <olink
        targetdoc="../elements/structural/unit.xml" targetptr="unit"
        ><code>&lt;unit&gt;</code></olink> element.</para>
    <warning>
      <para>When Writers set explicit <code><olink targetdoc="../attributes/order.xml"
            targetptr="order">order</olink></code> on <olink
          targetdoc="../elements/structural/target.xml" targetptr="target"
          ><code>&lt;target></code></olink> elements, they have to check for conflicts with implicit
            <code><olink targetdoc="../attributes/order.xml" targetptr="order">order</olink></code>,
        as <olink targetdoc="../elements/structural/target.xml" targetptr="target"
            ><code>&lt;target></code></olink> elements without explicit <code><olink
            targetdoc="../attributes/order.xml" targetptr="order">order</olink></code> correspond to
        their sibling <olink targetdoc="../elements/structural/source.xml" targetptr="source"
            ><code>&lt;source></code></olink> elements. Beware that moving one <olink
          targetdoc="../elements/structural/target.xml" targetptr="target"
          ><code>&lt;target></code></olink> element is likely to cause a renumbering domino effect
        throughout the enclosing <olink targetdoc="../elements/structural/unit.xml" targetptr="unit"
            ><code>&lt;unit></code></olink> element.</para>
    </warning>

    <para>For example, the following HTML documents have the same paragraph with three sentences in
      different order:<programlisting>
&lt;p lang='en'&gt;Sentence A. Sentence B. Sentence C.&lt;/p&gt;
</programlisting><programlisting>
&lt;p lang='fr'&gt;Phrase B. Phrase C. Phrase A.&lt;/p&gt;
</programlisting>The XLIFF representation of the content, after segmentation and alignment,
      would be:</para>

    <para><programlisting>
&lt;unit id="1"&gt;
  &lt;segment id="1"&gt;
    &lt;source&gt;Sentence A.&lt;/source&gt;
    &lt;target order="5"&gt;Phrase A.&lt;/target&gt;
  &lt;/segment&gt;
  &lt;ignorable&gt;
    &lt;source&gt; &lt;/source&gt;
  &lt;/ignorable&gt;
  &lt;segment id="2"&gt;
    &lt;source&gt;Sentence B.&lt;/source&gt;
    &lt;target order="1"&gt;Phrase B.&lt;/target&gt;
  &lt;/segment&gt;
  &lt;ignorable&gt;
    &lt;source&gt; &lt;/source&gt;
  &lt;/ignorable&gt;
  &lt;segment id="3"&gt;
    &lt;source&gt;Sentence C.&lt;/source&gt;
    &lt;target order="3"&gt;Phrase C.&lt;/target&gt;
  &lt;/segment&gt;
&lt;/unit&gt;
</programlisting></para>
  </section>

  <section id="segmentationModification">
    <title>Segmentation Modification</title>
    <para>When modifying segmentation of a <olink targetdoc="../elements/structural/unit.xml"
        targetptr="unit"><code>&lt;unit&gt;</code></olink>, Modifiers MUST meet the Constraints and
      follow the Processing Requirements defined below:</para>
    <itemizedlist>
      <title>Constraints</title>
      <listitem>
        <para>Integrity of the inline codes MUST be preserved. See the section on <olink
            targetdoc="../inline/inline.xml" targetptr="inlineCodes">Inline Codes</olink> and on
            <olink targetdoc="../inline/inline.xml" targetptr="annotations">Annotations</olink> for
          details.</para>
      </listitem>
      <listitem>
        <para>The entire source content of any one <olink
            targetdoc="../elements/structural/unit.xml" targetptr="unit"
            ><code>&lt;unit&gt;</code></olink> element MUST remain logically unchanged: <olink
            targetdoc="../elements/structural/segment.xml" targetptr="segment"
              ><code>&lt;segment&gt;</code></olink> elements or their data MUST NOT be moved or
          joined across units.</para>
      </listitem>
    </itemizedlist>
    <warning>
      <para>Note that when splitting or joining segments that have both source and target content it
        is advisable to keep the resulting segments linguistically aligned, which is likely to
        require human linguistic expertise and hence manual re-segmentation. If the linguistically
        correct alignment cannot be guaranteed, discarding the target content and retranslating the
        resulting source segments is worth considering.</para>
    </warning>

    <itemizedlist>
      <title>Processing Requirements</title>

      <listitem id="splittingSegments">
        <para>When the Modifiers perform a split operation:</para>
        <itemizedlist>
          <listitem>
            <para>Only <olink targetdoc="../elements/structural/segment.xml" targetptr="segment"
                  ><code>&lt;segment&gt;</code></olink> or <olink
                targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
                  ><code>&lt;ignorable></code></olink> elements that have their <olink
                targetdoc="../attributes/canResegment.xml" targetptr="canResegment"
                  ><code>canResegment</code></olink> value resolved to <code>yes</code> MAY be
              split.</para>
          </listitem>
          <listitem>
            <para>All new <olink targetdoc="../elements/structural/segment.xml" targetptr="segment"
                  ><code>&lt;segment&gt;</code></olink> or <olink
                targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
                  ><code>&lt;ignorable></code></olink> elements created and their <olink
                targetdoc="../elements/structural/source.xml" targetptr="source"
                  ><code>&lt;source&gt;</code></olink> and <olink
                targetdoc="../elements/structural/target.xml" targetptr="target"
                  ><code>&lt;target&gt;</code></olink> children MUST have the same attribute values
              as the original elements they were created from, as applicable, except for the <olink
                targetdoc="../attributes/id.xml" targetptr="id"><code>id</code></olink> attributes
              and, possibly, for the <olink targetdoc="../attributes/order.xml" targetptr="order"
                  ><code>order</code></olink>, <olink targetdoc="../attributes/state.xml"
                targetptr="state"><code>state</code></olink> and <olink
                targetdoc="../attributes/subState.xml" targetptr="substate"
                ><code>subState</code></olink> attributes.</para>
          </listitem>
          <listitem>
            <para>Any new <olink targetdoc="../attributes/id.xml" targetptr="id"
                ><code>id</code></olink> attributes MUST follow the <olink
                targetdoc="../elements/structural/segment.xml" targetptr="segment"
                  ><code>&lt;segment&gt;</code></olink> or <olink
                targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
                  ><code>&lt;ignorable></code></olink>
              <olink targetdoc="../attributes/id.xml" targetptr="id"><code>id</code></olink>
              constraints.</para>
          </listitem>
          <listitem>
            <para>If there was a target content in the original segment and if the <olink
                targetdoc="../attributes/state.xml" targetptr="state"><code>state</code></olink>
              attribute of the original segment was not <code>initial</code>, the <olink
                targetdoc="../attributes/state.xml" targetptr="state"><code>state</code></olink>
              attributes of the segments resulting from the split (and possibly their corresponding
                <olink targetdoc="../attributes/subState.xml" targetptr="substate"
                  ><code>subState</code></olink> attributes) MAY be changed to reflect the fact that
              the target content MAY need to be verified as the new segmentation MAY have
              desynchronized the alignment between the source and target contents.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem id="joiningSegments">
        <para>When the Modifiers perform a join operation:</para>
        <itemizedlist>
          <listitem>
            <para>Only <olink targetdoc="../elements/structural/segment.xml" targetptr="segment"
                  ><code>&lt;segment&gt;</code></olink> or <olink
                targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
                  ><code>&lt;ignorable></code></olink> elements that have their <olink
                targetdoc="../attributes/canResegment.xml" targetptr="canResegment"
                  ><code>canResegment</code></olink> value resolved to <code>yes</code> MAY be join
              with other elements.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>When the Modifiers or Mergers perform a join operation:</para>
        <itemizedlist>
          <listitem>
            <para>Two elements (<olink targetdoc="../elements/structural/segment.xml"
                targetptr="segment"><code>&lt;segment&gt;</code></olink> or <olink
                targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
                  ><code>&lt;ignorable></code></olink>) MUST NOT be joined if their <olink
                targetdoc="../elements/structural/target.xml" targetptr="target"
                  ><code>&lt;target&gt;</code></olink> have resolved <olink
                targetdoc="../attributes/order.xml" targetptr="order"><code>order</code></olink>
              values that are not consecutive.</para>
          </listitem>
          <listitem>
            <para>The attributes of the elements to be joined (<olink
                targetdoc="../elements/structural/segment.xml" targetptr="segment"
                  ><code>&lt;segment&gt;</code></olink> or <olink
                targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
                  ><code>&lt;ignorable></code></olink>) and the attributes of their <olink
                targetdoc="../elements/structural/source.xml" targetptr="source"
                  ><code>&lt;source&gt;</code></olink> and <olink
                targetdoc="../elements/structural/target.xml" targetptr="target"
                  ><code>&lt;target&gt;</code></olink> MUST be carried over in the resulting joined
              elements.</para>
          </listitem>
          <listitem>
            <para>If attributes of elements to be joined (<olink
                targetdoc="../elements/structural/segment.xml" targetptr="segment"
                  ><code>&lt;segment&gt;</code></olink> or <olink
                targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
                  ><code>&lt;ignorable></code></olink>) differ, or if the attributes of their <olink
                targetdoc="../elements/structural/source.xml" targetptr="source"
                  ><code>&lt;source&gt;</code></olink> or <olink
                targetdoc="../elements/structural/target.xml" targetptr="target"
                  ><code>&lt;target&gt;</code></olink> differ, the resulting joined elements MUST
              comply with following rules:</para>
            <itemizedlist>
              <listitem>
                <para>If the <olink targetdoc="../attributes/state.xml" targetptr="state"
                      ><code>state</code></olink> attributes of the <olink
                    targetdoc="../elements/structural/segment.xml" targetptr="segment"
                      ><code>&lt;segment&gt;</code></olink> elements differ: the <olink
                    targetdoc="../attributes/state.xml" targetptr="state"><code>state</code></olink>
                  attribute of the joined <olink targetdoc="../elements/structural/segment.xml"
                    targetptr="segment"><code>&lt;segment&gt;</code></olink> MUST be set to the
                  "earliest" of the values specified in the original <olink
                    targetdoc="../elements/structural/segment.xml" targetptr="segment"
                      ><code>&lt;segment&gt;</code></olink> elements. The sequence of <olink
                    targetdoc="../attributes/state.xml" targetptr="state"><code>state</code></olink>
                  values are defined in the following order: 1: <code>initial</code>, 2:
                    <code>translated</code>, 3: <code>reviewed</code>, and 4:
                  <code>final</code>.</para>
              </listitem>
              <listitem>
                <para>The <olink targetdoc="../attributes/subState.xml" targetptr="substate"
                      ><code>subState</code></olink> attribute MUST be the one associated with the
                    <olink targetdoc="../attributes/state.xml" targetptr="state"
                    ><code>state</code></olink> attribute selected to be used in the joined <olink
                    targetdoc="../elements/structural/segment.xml" targetptr="segment"
                      ><code>&lt;segment&gt;</code></olink>. If no <olink
                    targetdoc="../attributes/subState.xml" targetptr="substate"
                      ><code>subState</code></olink> attribute is associated with that <olink
                    targetdoc="../attributes/state.xml" targetptr="state"
                  ><code>state</code></olink>, the joined <olink
                    targetdoc="../elements/structural/segment.xml" targetptr="segment"
                      ><code>&lt;segment&gt;</code></olink> MUST NOT have a <olink
                    targetdoc="../attributes/subState.xml" targetptr="substate"
                      ><code>subState</code></olink>.</para>
              </listitem>
              <listitem>
                <para>If the <olink targetdoc="../attributes/xml_space.xml" targetptr="xml_space"
                      ><code>xml:space</code></olink> attributes differ: The <olink
                    targetdoc="../elements/structural/source.xml" targetptr="source"
                      ><code>&lt;source&gt;</code></olink> and <olink
                    targetdoc="../elements/structural/target.xml" targetptr="target"
                      ><code>&lt;target&gt;</code></olink> of the joined element MUST be set to
                    <code>xml:space="preserve"</code>.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem id="joiningOrSplittingSegments">
        <para>When the Modifiers or Mergers perform a join or a split operation:</para>
        <itemizedlist>
          <listitem>
            <para>If any <olink targetdoc="../elements/structural/segment.xml" targetptr="segment"
                  ><code>&lt;segment&gt;</code></olink> or <olink
                targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
                  ><code>&lt;ignorable></code></olink> element of the <olink
                targetdoc="../elements/structural/unit.xml" targetptr="unit"
                  ><code>&lt;unit&gt;</code></olink> had a <olink
                targetdoc="../elements/structural/target.xml" targetptr="target"
                  ><code>&lt;target&gt;</code></olink> child with an <olink
                targetdoc="../attributes/order.xml" targetptr="order"><code>order</code></olink>
              attribute prior to the segmentation modification, the <olink
                targetdoc="../elements/structural/target.xml" targetptr="target"
                  ><code>&lt;target&gt;</code></olink> child of all <olink
                targetdoc="../elements/structural/segment.xml" targetptr="segment"
                  ><code>&lt;segment&gt;</code></olink> and <olink
                targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
                  ><code>&lt;ignorable></code></olink> elements in the <olink
                targetdoc="../elements/structural/unit.xml" targetptr="unit"
                  ><code>&lt;unit&gt;</code></olink> MUST be examined and if necessary their <olink
                targetdoc="../attributes/order.xml" targetptr="order"><code>order</code></olink>
              attributes updated to preserve the ordering of the target content prior the
              segmentation modification.</para>
          </listitem>
        </itemizedlist>
      </listitem>

    </itemizedlist>


  </section>
  <section role="informative">
    <title>Best Practice for Mergers</title>

    <para>Since a typical simple corporate implementation of XLIFF 2 is a localization tool that is
      at the same time an Extractor and a Merger with the full knowledge of the extraction
      mechanism, the community requested a non-normative best practice for merging after an XLIFF
      Round-trip.</para>
    <para>First of all, it needs to be noted that Mergers are not advised to rely on their knowledge
      of the extraction mechanism in terms of <link linkend="segmentation">segmentation</link>.
      Modifiers are free to <link linkend="segmentationModification">change segmentation</link>
      during the roundtrip and even <link linkend="segorder">to change order of target content held
        in different segments of the same unit</link>. Therefore, it can be advised as a best
      practice before merging to look for all segments within each unit, even and especially when
      the Extractor had created only one segment per unit.</para>
    <para>When joining segments, Mergers need to observe all <emphasis>Processing
        Requirements</emphasis> for <link linkend="joiningSegments">joining segments</link> and
        <link linkend="joiningOrSplittingSegments"> joining or splitting segments</link></para>
    <para>When joining segments it can happen that not all <olink
        targetdoc="../elements/structural/segment.xml" targetptr="segment"
          ><code>&lt;segment&gt;</code></olink> or <olink
        targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
          ><code>&lt;ignorable></code></olink> elements actually have their <olink
        targetdoc="../elements/structural/target.xml" targetptr="target"
        ><code>&lt;target&gt;</code></olink> element children. This situation can be legal depending
      on a specific workflow set up. The <olink targetdoc="../elements/structural/target.xml"
        targetptr="target"><code>&lt;target&gt;</code></olink> child within an <olink
        targetdoc="../elements/structural/ignorable.xml" targetptr="ignorable"
          ><code>&lt;ignorable></code></olink> element is always optional, but at the same can be
      created any time by simply copying the content of the sibling <olink
        targetdoc="../elements/structural/source.xml" targetptr="source"
        ><code>&lt;source&gt;</code></olink>, see <olink targetdoc="../inline/inline.xml"
        targetptr="contentmodificationwithouttarget">Content Modification Without Target</olink>.
      The presence of <olink targetdoc="../elements/structural/target.xml" targetptr="target"
          ><code>&lt;target&gt;</code></olink> children can be better governed in <olink
        targetdoc="../elements/structural/segment.xml" targetptr="segment"
          ><code>&lt;segment&gt;</code></olink> elements that have the <olink
        targetdoc="../attributes/state.xml" targetptr="state"><code>state</code></olink> attribute.
      The <olink targetdoc="../attributes/state.xml" targetptr="state"><code>state</code></olink>
      attribute is strictly optional with the default <code>initial</code>, yet it is advisable for
      a corporate localization operation to request that their service providers progress that
      attribute through <code>translated</code> and <code>reviewed</code> to <code>final</code>.
      This attribute cannot be progressed from the <code>initial</code> state without a <olink
        targetdoc="../elements/structural/target.xml" targetptr="target"
        ><code>&lt;target&gt;</code></olink> child and all violations of <olink
        targetdoc="../inline/inline.xml" targetptr="editinghints">Editing Hints</olink> will become
      validation errors only in the <code>final</code> state. Usage of <olink
        targetdoc="../attributes/state.xml" targetptr="state"><code>state</code></olink> also allows
      for fine-tuning of a specific workflow <emphasis>State Machine</emphasis> with the dependent
        <olink targetdoc="../attributes/subState.xml" targetptr="substate"
        ><code>subState</code></olink> attribute. With the attribute <olink
        targetdoc="../attributes/subState.xml" targetptr="substate"><code>subState</code></olink>,
      implementers can create an arbitrary number of private state machine under their prefix
      authorities. It is advisable to register such authority prefixes with the XLIFF TC and publish
      their documentation.</para>
    <para>When Mergers need to perform the merge in a non-final state, when the presence of targets
      cannot be guaranteed, they are free to create preliminary targets again following the <olink
        targetdoc="../inline/inline.xml" targetptr="contentmodificationwithouttarget">Processing
        Requirements for Content Modification Without Target</olink></para>
  </section>

</section>
